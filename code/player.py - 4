#This was commented by Luc Bourassa, ID 21027232

#For all comments to this module, the word player refers to the user providing input, while the word character refers
#to the in game rendition of the model that carries out these commands.

#This module is for all things regarding the character including player input, basic animations, abilities, and stats.
#Starts by bringing in other functions and variables from the settings, support, and entity modules
#These are for use in this module and most regard variables surrounding the character model and its potential states.

import pygame 
from settings import *
from support import import_folder
from entity import Entity

class Player(Entity):
	def __init__(self,pos,groups,obstacle_sprites,create_attack,destroy_attack,create_magic):
	#This function is used to update every aspect of the character regarding its different possible states
	#There are 12 states in total: 4 for attacking (1 in each direction), 4 for moving (1 in each direction) and 4 for standing still(1 in each direction
	#All of these parts deal with these states in one way or another, and allow the player to continually provide input for the character with response
	
		super().__init__(groups)
		self.image = pygame.image.load('../graphics/test/player.png').convert_alpha()
		self.rect = self.image.get_rect(topleft = pos)
		self.hitbox = self.rect.inflate(-6,HITBOX_OFFSET['player'])

		# graphics setup
		self.import_player_assets()  
		self.status = 'down' #Default for starting the game is character facing down

		# movement 
		self.attacking = False
		self.attack_cooldown = 400
		self.attack_time = None
		self.obstacle_sprites = obstacle_sprites

		# weapon
		self.create_attack = create_attack
		self.destroy_attack = destroy_attack
		self.weapon_index = 0
		self.weapon = list(weapon_data.keys())[self.weapon_index]
		self.can_switch_weapon = True
		self.weapon_switch_time = None
		self.switch_duration_cooldown = 200

		# magic 
		self.create_magic = create_magic
		self.magic_index = 0
		self.magic = list(magic_data.keys())[self.magic_index]
		self.can_switch_magic = True
		self.magic_switch_time = None

		# stats
		self.stats = {'health': 100,'energy':60,'attack': 10,'magic': 4,'speed': 5}
		self.max_stats = {'health': 300, 'energy': 140, 'attack': 20, 'magic' : 10, 'speed': 10}
		self.upgrade_cost = {'health': 100, 'energy': 100, 'attack': 100, 'magic' : 100, 'speed': 100}
		self.health = self.stats['health'] * 0.5
		self.energy = self.stats['energy'] * 0.8
		self.exp = 5000
		self.speed = self.stats['speed']

		# damage timer
		self.vulnerable = True
		self.hurt_time = None
		self.invulnerability_duration = 500

		# import a sound
		self.weapon_attack_sound = pygame.mixer.Sound('../audio/sword.wav')
		self.weapon_attack_sound.set_volume(0.4)

	def import_player_assets(self):
	#This function provides animation output for each possible state that the character is in
	
		character_path = '../graphics/player/'
		
		#Dictionary to define each state of the character and its corresponding name for the animation of that state
		#As stated earlier there are 12 states, 3 in terms of different inputs, with 4 for each different input in each direction(up, down, left, right)
		self.animations = {'up': [],'down': [],'left': [],'right': [],
			'right_idle':[],'left_idle':[],'up_idle':[],'down_idle':[],
			'right_attack':[],'left_attack':[],'up_attack':[],'down_attack':[]}

		for animation in self.animations.keys():
			full_path = character_path + animation
			self.animations[animation] = import_folder(full_path)

	def input(self):
	#This function regards all possible types of attacking, meaning it allows for attack input, and the type of attack to be switched by another input
	#These attacks all use different sprites, the data for which is stored in another module. 
	#However, the character attack animation is the same, to reduce the number of states the character sprite needs
	
	#It should be noted that while it is possible for the character to be in multiple states at once.
	#this fuction, and the weapon segment from the first function prevent that to reduce the amount and complexity of sprites needed
	
		if not self.attacking:
		#This is a clause that prevents movement and attack at the same time
		#if this triggers, the character is not in an attacking state, and can move freely and change weapons
		#When player attacks, this if statement is untrue, so attacking restricts all input
			
			keys = pygame.key.get_pressed()    #Allows keyboard input to be provided outside of an attacking state.
			#The function this variable depends on is mapped by the standard keyboard layout, and the key pressed is mapped by a dictionary in a separate module
			#All input for non idling animations is through this variable, which is done to allow predictability in the inputs
			#and reduce the sheer number of possibilities for the character to be in (less bugs hopefully)

			# movement input, statements update the vertical and horizontal movements separately
			#so that the character is able to move diagonally (Both vertically and horizontally at the same time
			
			if keys[pygame.K_UP]:  #Input up key from the player
				self.direction.y = -1   #Updates the coordinate of the player to move up, is negative because the player starts the game facing down, which is the positive direction
				self.status = 'up'    #Sets status of the player to be up, changing the sprite used
			elif keys[pygame.K_DOWN]: #Input down key from player
				self.direction.y = 1  #Moves the player down by 1 unit in the map, defined in settings module
				self.status = 'down'  #Sets the state of the character, all animations from attacking idling and moving occur in the down direction
			else:
				self.direction.y = 0  #For when no vertical input is given but movement is still happening

			if keys[pygame.K_RIGHT]: #Input right key from player to move right
				self.direction.x = 1  #Right is arbitrarily set as the positive direction on the horizontal axis, moves character right
				self.status = 'right' #Sets status to use right facing sprite animations
			elif keys[pygame.K_LEFT]:
				self.direction.x = -1  #Moves left on the horizontal axis
				self.status = 'left' #Sets status to use left facing sprite animations
			else:
				self.direction.x = 0  #For when character is not given input to move horizontally

			# attack input, this is for regular attacks with weapons and can be done infinitely (no restrictive stat, as with magic)
			#This makes the initial if statement untrue, and closes off all input for a short time (During cooldown)
			if keys[pygame.K_SPACE]:
				self.attacking = True #Attack state triggers, shutting off all potential input through this function for a short time
				self.attack_time = pygame.time.get_ticks()   #Cooldown (Time in attack state), varies based on weapon type
				self.create_attack()    #Also based on weapon type, this creates a sprite of the weapon used while attacking
				self.weapon_attack_sound.play()   #Attacking with a weapon has its own sound

			# magic input, for attacks regarding magic, which can be used a finite number of times based on the characters energy stat
			#Data for these variables are from another module
			#This makes the initial if statement untrue, and closes off all input for a short time (During cooldown)
			if keys[pygame.K_LCTRL]:
				self.attacking = True  #Attack state triggers, shutting off all potential input through this function for a short time
				self.attack_time = pygame.time.get_ticks()      #Cooldown for magic attacks, based on type of magic
				style = list(magic_data.keys())[self.magic_index]    #Used to show a certain sprite based on the type of magic
				strength = list(magic_data.values())[self.magic_index]['strength'] + self.stats['magic'] #Damage done is increased through in game stats
				cost = list(magic_data.values())[self.magic_index]['cost']    #Magic costs an amount of energy, based on the type of magic
				self.create_magic(style,strength,cost)        #Creates a sprite, reduces energy, and damages enemies based on values found above

			if keys[pygame.K_q] and self.can_switch_weapon:  #Allows change of weapon if the character has not recently switched its weapon
			
				#Provides cooldown time for switching weapons, where players can still provide other input, but not switch weapons again
				self.can_switch_weapon = False
				self.weapon_switch_time = pygame.time.get_ticks()
				
				#Rotates between weapons by counting the weapon number (0 to 4, adding 1 each time weapon is switched)
				#Then resetting the count back to 0 when the count exceeds 4 (The amount of weapons existing in the game)
				if self.weapon_index < len(list(weapon_data.keys())) - 1:
					self.weapon_index += 1
				else:
					self.weapon_index = 0
					
				#Data for the new weapon in use after any change has been made. Weapon data is stored in a list and is indexed accordingly
				#This results in a different sprite with different stats (Cooldown, hitbox, damage, etc)
				self.weapon = list(weapon_data.keys())[self.weapon_index]

			if keys[pygame.K_e] and self.can_switch_magic:
			#Allows the player to switch between magic types (2 total) when they hit the appropriate button (e) and the cooldown for switching is reached
			
			#Works the exact same as weapon switching, where the player can still provide input, but not change magic for a short time
				self.can_switch_magic = False
				self.magic_switch_time = pygame.time.get_ticks()
				
				if self.magic_index < len(list(magic_data.keys())) - 1:  
				#Also works the same, but there are 2 types of magic, so this switches between the if and else clauses each time magic is switched
					self.magic_index += 1
				else:
					self.magic_index = 0

				#Updates self.magic to use different data from the magic data in the settings module
				self.magic = list(magic_data.keys())[self.magic_index]

	def get_status(self):

		# idle status
		if self.direction.x == 0 and self.direction.y == 0:
			if not 'idle' in self.status and not 'attack' in self.status:
				self.status = self.status + '_idle'

		if self.attacking:
			self.direction.x = 0
			self.direction.y = 0
			if not 'attack' in self.status:
				if 'idle' in self.status:
					self.status = self.status.replace('_idle','_attack')
				else:
					self.status = self.status + '_attack'
		else:
			if 'attack' in self.status:
				self.status = self.status.replace('_attack','')

	def cooldowns(self):
		current_time = pygame.time.get_ticks()

		if self.attacking:
			if current_time - self.attack_time >= self.attack_cooldown + weapon_data[self.weapon]['cooldown']:
				self.attacking = False
				self.destroy_attack()

		if not self.can_switch_weapon:
			if current_time - self.weapon_switch_time >= self.switch_duration_cooldown:
				self.can_switch_weapon = True

		if not self.can_switch_magic:
			if current_time - self.magic_switch_time >= self.switch_duration_cooldown:
				self.can_switch_magic = True

		if not self.vulnerable:
			if current_time - self.hurt_time >= self.invulnerability_duration:
				self.vulnerable = True

	def animate(self):
		animation = self.animations[self.status]

		# loop over the frame index 
		self.frame_index += self.animation_speed
		if self.frame_index >= len(animation):
			self.frame_index = 0

		# set the image
		self.image = animation[int(self.frame_index)]
		self.rect = self.image.get_rect(center = self.hitbox.center)

		# flicker 
		if not self.vulnerable:
			alpha = self.wave_value()
			self.image.set_alpha(alpha)
		else:
			self.image.set_alpha(255)

	def get_full_weapon_damage(self):
		base_damage = self.stats['attack']
		weapon_damage = weapon_data[self.weapon]['damage']
		return base_damage + weapon_damage

	def get_full_magic_damage(self):
		base_damage = self.stats['magic']
		spell_damage = magic_data[self.magic]['strength']
		return base_damage + spell_damage

	def get_value_by_index(self,index):
		return list(self.stats.values())[index]

	def get_cost_by_index(self,index):
		return list(self.upgrade_cost.values())[index]

	def energy_recovery(self):
		if self.energy < self.stats['energy']:
			self.energy += 0.01 * self.stats['magic']
		else:
			self.energy = self.stats['energy']

	def update(self):
		self.input()
		self.cooldowns()
		self.get_status()
		self.animate()
		self.move(self.stats['speed'])
		self.energy_recovery()
